steps:
  # Create the patch script
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cat > patch_werkzeug.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import importlib
        
        # Find werkzeug
        import werkzeug
        werkzeug_dir = os.path.dirname(werkzeug.__file__)
        urls_path = os.path.join(werkzeug_dir, "urls.py")
        
        # Add url_quote to the file
        with open(urls_path, "a") as f:
            f.write("\n# Patched for Flask compatibility\nfrom urllib.parse import quote as url_quote\n")
        
        print(f"Successfully patched {urls_path}")
        EOF
        
        cat > entrypoint.sh << 'EOF'
        #!/bin/bash
        # Apply werkzeug patch if needed
        python /app/patch_werkzeug.py || echo "Patch may have already been applied"
        
        # Start Gunicorn
        echo "Starting application..."
        exec gunicorn --bind :$PORT --workers 1 --threads 8 --timeout 600 app:app
        EOF
        
        chmod +x patch_werkzeug.py entrypoint.sh

  # Build the patched Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/py-backend-patched:latest'
      - '-f'
      - 'Dockerfile'
      - '--build-arg'
      - 'SKIP_DOWNLOAD=true'
      - '.'

  # Add the patches to the image
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker create --name temp gcr.io/${PROJECT_ID}/py-backend-patched:latest
        docker cp patch_werkzeug.py temp:/app/
        docker cp entrypoint.sh temp:/app/
        docker commit --change="ENTRYPOINT [\"/app/entrypoint.sh\"]" temp gcr.io/${PROJECT_ID}/py-backend-patched:latest
        docker rm temp

  # Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'py-backend'
      - '--image'
      - 'gcr.io/${PROJECT_ID}/py-backend-patched:latest'
      - '--platform'
      - 'managed'
      - '--region'
      - 'us-central1'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--timeout'
      - '600'
      - '--allow-unauthenticated'
      - '--set-env-vars=DISABLE_TRANSFORMERS=true,TF_ENABLE_ONEDNN_OPTS=0,TF_CPP_MIN_LOG_LEVEL=3,PORT=8080'
      - '--cpu-boost'

images:
  - 'gcr.io/${PROJECT_ID}/py-backend-patched:latest'

timeout: '1800s' 